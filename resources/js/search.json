[[{"l":"Welcome to BlissRoms","p":["BlissRoms, an enchanting open-source operating system built upon the AOSP, offers a harmonious blend of boundless customization, unparalleled options, and fortified security features. With an unwavering commitment to delivering pure bliss to its users, it unveils a captivating world of limitless possibilities."]},{"l":"BlissRoms Important Links","p":["Website","Downloads","Documentation","Twitter","Instagram","Telegram","Reddit","Source","Device Source","Gerrit Code Review","Help us to Translate"]}],[{"l":"Build BlissRom"},{"l":"Introduction","p":["This is the official guide to build BlissRom for your device. In this guide, We will only cover official devices with actual maintainers. We will not deeply dive into porting devices.","The golden rule for building a ROM is utmost patience. If something breaks, wait for your maintainer to fix it, send a polite message to your maintainer, or better yet, try and fix it yourself. Then you can make a merge request and contribute!","So, Let’s get started."]},{"l":"Preparation","p":["To get started, you need a computer with Ubuntu 18.04 or newer (LTS), at least 200GB space of HDD/SSD, and at least 8GB RAM. A decent CPU (or CPUs if you have a server motherboard) is recommended. Other distros can work but is not officially supported in this guide.","Underpowered machines may crash during compilation. If that happens, you may try and restart the build as most crashes are caused by lack of memory. If your storage space has run out, then you will need to build on a different hard drive."]},{"l":"Install the JDK","p":["Install OpenJDK:"]},{"l":"Install build tools","p":["To install the required build tools, run the following command:"]},{"l":"Install source code tools","p":["Now we need to get the source code via a program named repo. The primary function of repo is to read a manifest file located in BlissRoms GitHub organization, and find what repositories you need to actually build Android.","Create a ~/bin directory for repo:","The -p flag instructs mkdir to only create the directory if it does not exist in the first place. Now download the repo tool into ~/bin:","Make repo executable:","And add it to PATH:","Scroll to the end of the file and type these lines:","Ctrl-O and enter to save, then Ctrl-X to exit nano. Now either logout and login again (or reboot), or source the file:","Which can be shortened to:"]},{"i":"what-is-source","l":"What is source?","p":["source is a bash command to read aliases, functions, and commands from the specified file. Typically, you'll supply bash with a configuration file such as .bashrc or .bash_profile, or an initialization file such as envsetup.sh. The difference is that while the configuration file lists configuration and user-defined aliases and functions, initialization files typically hold build commands such as breakfast, brunch, and lunch. Without those commands building would be significantly harder as you would have to memorize the long command to invoke a build manually!","But why do you need to run it after modifying a file? Well, bash cannot automatically detect changes in our files. To solve this, we either source it or log out and log back in, forcing bash to reload configuration files. Keep this in mind, because unlike configuration files, if you forget to source initialization files, build commands will not function!"]},{"l":"Download","p":["Create a directory for the source:","Before we download, we need to tell repo and git who we are. Run the following commands, substituting your information:","Now, we’re ready to initialize. We need to tell repo which manifest to read:","-b is for the branch, and we’re on typhoon, Android 13. It’ll take a couple of seconds. You may need to type y for the color prompt.","Then sync the source:","Note: For more information about the repo tool, visit the Build Tips guide to learn more about the repo flags.","repo will start downloading all the code. That’s going to be slow, even on a fiber network. Expect downloads to take more than a couple hours."]},{"l":"Build","p":["Set up the build environment:","This is the initialization file we talked about earlier up top. This \"initializes\" the environment, and imports a bunch of useful build commands required to build your device. Again, you need to remember to source this file every time you log out and log back in, or launch a new bash/Terminal instance.","Define what device you’re going to build. For example, the Pixel 4A, has a codename of sunfish. You can check your specific device's codename on GitHub or on Google. Execute:","What does this do? breakfast searches repositories for your device \"tree\", which contains all the details needed to make the build suitable for your device. CPU, kernel info, device screen size, whether the board has Bluetooth, NFC, what frequencies the build needs for Wi-Fi, and a bunch of other things. breakfast will automatically search in the BlissRoms-Devices GitHub repository, and grab your device tree for you.","Okay, so we have the device tree set up. Feel free to browse around the source code to see what changed. You should see folders added to device/, kernel/ and vendor/. A shortcut:","will dump you back in the root of the source code tree. So if you’ve been going through folders and don’t have any idea where you are, you can use the above command. This command, however, requires you to have source d build/envsetup.sh earlier.","We're ready to build, but before we teach you the easy command to execute a build, we will first try the manual method. To set up the current terminal environment for building your particular device, execute:","Let's break down the command. lunch initializes the proper environmental variables required for the build tools to build your specific device. Things like BLISS_DEVICE and other variables are set in this stage, and the changed variables will be shown as output. bliss_ is the ROM that we are building. As convention, all devices will have this prefix. sunfish is the specific device we are building - in this case, the Pixel 4A. Finally, userdebug means that we will build a user-debuggable variant. This is usually what most ROMs use for publishing their builds. Manufacturers typically use user which disables most of the useful Android Logcats."]},{"i":"my-device-isnt-booting-and-userdebug-wont-print-any-adb-logcats-what-gives","l":"My device isn't booting, and userdebug won't print any adb logcats. What gives?","p":["There is a third build variant called eng, short for engineering builds. These builds will activate adb logcat during boot, and will show you exactly what is going wrong, where, and why. However, these builds are NOT recommended for normal usage as they are not securely hardened, have log spam that will slow down your device, and other unexpected problems like userspace utilities crashing during runtime. If you want to submit your device for mainline, do NOT submit an eng build!","All set? Let's start the building process. Run:","mka blissify","And the build should start. The build process will take a long time. Prepare to wait a few hours, even on a decent machine."]},{"i":"why-mka-and-not-make","l":"Why mka and not make?","p":["make only runs with 1 thread. mka is properly aliased to use all of your threads by checking nproc.","If you want to customize your thread count (maybe you're building with a fan-screaming laptop in a quiet coffee shop), use make blissify -j#, replacing the hash with the number of threads (example of make blissify -j4)."]},{"i":"i-get-an-error-about-no-blissify-targets-to-build-against-whats-wrong","l":"I get an error about no blissify targets to build against, what's wrong?","p":["If you are building other ROMs, it is usually make bacon. For BlissRoms, we chose the build target of blissify. If that doesn't work, sometimes there is a bug, or the ROM developers do not implement a bacon target to build against. In this case, you will need to find what name they use to initialize a full build of the ROM. Conventionally, it is supposed to be bacon, but some ROM developers change this name inadvertently, or actually have a bug that causes the build target to never be found. If you cannot locate the build target, ask the developers of the ROM. Alternatively, you can try poking around in build/make/core/Makefile to see what the build target name is. But this is out of the scope of this article as you're not supposed to be building other ROMs (that's not what this tutorial is for, sorry!)","All right, but that's annoying. You had to type three commands to build it all. What about running one command?","Options:","Examples:","To build with gapps","To build with FOSS","To build with gapps and deviceclean","To build an userdebug build with gapps","To build an eng build with gapps","To build an user build with gapps","This method is also backwards compatible with the legacy blissify command also Default build type = userdebug Default build variant = vanilla","But what is blissify? It is a compact form of these commands:","Sounds great, right? Once you have run the command, jump over to the next section."]},{"l":"After building","p":["There are two outcomes to a build - either it fails and you get a red error message from make, or it succeeds and you see the Bliss logo in ASCII. If you encounter the former, you need to go back and fix whatever it's complaining about. Typically, 90% of the time the problem will be in your device tree. For the other 10%, submit a bug report to the ROM developers. Be sure to include the full log of your build to help diagnose the problem, and your device tree.","If you face the latter, congratulations! You've successfully built BlissRoms for your device. Grab the artifacts for your device:","In here, you’ll find a .zip file that goes along the format of Bliss-vxx.xx-sunfish-UNOFFICIAL-vanilla-202xxxxx.zip. Install custom recovery of your choice, then flash the build to your device. Bliss 14.xx versions indicate that you have succesfully built BlissROMs for your device based on Android 11. Bliss 15.xx versions indicate that you have succesfully built BlissROMs for your device based on Android 12/12.1. Bliss 16.xx versions indicate that you have succesfully built BlissROMs for your device based on Android 13.","There you go, you have succesfully built BlissROMs. Happy Flashing and Enjoy!"]}],[{"l":"Build BlissRoms"},{"l":"System requirements for building BlissRoms","p":["Before you begin building BlissRoms, ensure that your system meets the following requirements:","Operating System: Ubuntu 18.04 or a newer version (LTS).","Storage: At least 200GB of available HDD/SSD space.","RAM: A minimum of 8GB RAM is required for smooth operation.","CPU: A decent CPU (or multiple CPUs for server motherboards) is recommended to expedite the build process.","While other Linux distributions may work, this guide specifically focuses on Ubuntu, which is officially supported for building BlissRoms.","Please note the following considerations:","Underpowered machines may experience crashes during compilation due to resource limitations. If you encounter crashes, try restarting the build process as most issues are caused by insufficient memory.","If your storage space is running low, you may need to build on a different hard drive with sufficient space.","Ensure that your system meets these requirements to proceed with the BlissRoms build process."]}],[{"l":"Conclusion"},{"l":"Conclusion","p":["Building a ROM is very hard and tedious and the results are very rewarding! If you managed to follow along, congratulations!","After you finish building, you can try out the Git Started guide. Make changes, commit, and send them off to our Gerrit for review! Or better yet, download experimental commits not ready for the mainline repositories and review them! Again, ROM building is a fun project you can work with. I hope this guide was a lot of fun to run through!"]}],[{"l":"Troubleshoot"},{"l":"Troubleshooting","p":["If your build failed, there are a couple things you can try.","Try a fresh repo sync to make your repository up to date. Sometimes, the Internet connection between you and GitHub can be flaky. In rare cases a commit merge might be ongoing, and you might've grabbed an incomplete merge. Mostly, this should fix the issue 70% of the time.","Make sure your dependencies are installed correctly. Error messages help out a lot here! Often it will say shared/linked library not found or something along those lines.","Make sure you sourced build/envsetup.sh. This is especially common and worth suspecting if none of the build commands like breakfast and lunch work. If you have repo sync ed do this again.","Make sure you’re at the root of the build tree. Again, to quickly jump there, use croot.","Make sure you ran breakfast correctly and it did not error out. Missing device files will prevent successful builds.","Make sure your computer meets minimum requirements to compile AOSP. Chances are, you need more memory/CPU power to complete a build.","Make sure your computer isn't faulty. This is unlikely, but to check, use a stress-test program like Prime95.","If something goes wrong and you've tried everything above, first use Google to look up your error! Most of the errors you encounter is due to misconfiguration and wrong commands entered. More often than not, Google will have the answer you are looking for. If you're still stuck and nothing fixes the problem, then ask us via our Telegram Build Support chat.(Please only ask issues about BlissRoms, not other custom ROMs as we are unable to assist with those!)"]}],[{"l":"Overlays"},{"l":"General Overlays"},{"i":"-refresh-rate-overlays","l":"• Refresh Rate Overlays","p":["This overlay is required to Enable Refresh Rate Controls."]},{"i":"-charging-support-overlay","l":"• Charging Support Overlay","p":["- VOOC Charging ( If your device supports )","This overlay is required to Enable VOOC charging support.","- WARP Charging ( If your device supports )","This overlay is required to Enable Warp charging support.","- Dash Charging ( If your device supports )","This overlay is required to Enable Dash charging support."]},{"i":"-multi-usb-controller-overlay-only-for-asus-rog-devices","l":"• Multi usb controller overlay (ONLY FOR ASUS ROG DEVICES)","p":["Since all ROG devices have 2 usb ports. We can use both for mtp, not just as charger.","This overlay is required to add support for Multi USB Controller."]},{"i":"-multi-colour-led","l":"• Multi-colour LED","p":["This overlay is required to Enable Multi-coloured LED lights for supported devices.","For most of the Xiaomi devices, this must be set to 'false' as they have white-only LEDs."]},{"i":"-call-recording","l":"• Call Recording","p":["This feature only works on AOSP Dialer and not on Google Dialer.","This overlay is required to Enable Call recording on AOSP Dialer's.","Call recording is illegal in some countries. Kindly refer to local laws before enabling this feature!!"]},{"l":"UDFPS Specific Overlays"},{"i":"-udfps-support","l":"• UDFPS Support","p":["This overlay is required to Enable UDFPS Support. The overlay is used to determine HBM Type for UDFPS. Required inorder for UDFPS to work."]},{"i":"-udfps-vendor-code","l":"• UDFPS Vendor code","p":["This overlay is used to define vendor code. Required inorder for UDFPS to work."]},{"i":"-udfps-animations","l":"• UDFPS Animations","p":["For UDFPS Animation to work you need 2 things in your device tree source.","A Flag in bliss_codename.mk makefile in your respective device tree","An overlay to set Default FOD Pressed Color","Flag Required to build UDFPS Animation resources","To set Default UDFPS Pressed color","This overlay is required to set Default UDFPS Pressed Color.","To set UDFPS Animation Offset","This overlay is required to set UDFPS Animation offset for respective devices.","Adjust this value as per your device.","To set UDFPS Animation Size","This overlay is required to set UDFPS Animation size for respective devices.","To set Color of the UDFPS Pressed view","This overlay is required to set Color of the UDFPS Pressed view for respective devices."]},{"i":"-screen-off-fod","l":"• Screen-Off FOD","p":["This overlay is required to Enable Screen OFF FOD."]}],[{"l":"Requirements","p":["Before you apply for maintainership to add your device to our official devices list, please read the following requirements carefully.","Warning: Any violations found or any attempts to circumvent the requirements below may lead to your application being rejected and you being blacklisted from the maintainer program.","You must physically own the device you are applying official status for. We do not allow blind builds.","We may allow exceptions if a trusted friend owns the device and is willing to help test your builds. However, this will only be approved on a case-by-case basis.","Asking users to test blind builds is not allowed.","You must have a working knowledge of Git and Gerrit.","You must maintain said device unofficially for at least 1 month with constant updates. Make sure builds are stable for usage. Users should not report any significant problems with your build.","You must release your device sources publicly with proper authorship on every commit. We do not allow hiding sources to \"compete\" with other ROM teams, as we believe that goes against the open source spirit.","Once applied, please do not spam team members with updates regarding your application. We will respond within a week with your application decision."]}],[{"l":"BlissRoms Code of Conduct"},{"l":"Introduction","p":["BlissRoms is an open-source project dedicated to developing and enhancing the Android operating system. As a community-driven project, we value the participation of individuals from all backgrounds and experiences. This Code of Conduct outlines our expectations for behavior and serves as a guide for fostering a positive and inclusive environment for all participants."]},{"l":"Purpose","p":["The purpose of this Code of Conduct is to ensure a safe, respectful, and inclusive community where individuals can collaborate and contribute to the BlissRoms project. This includes developers, contributors, users, and anyone interacting with the project in any capacity."]},{"l":"Expected Behavior","p":["All participants involved in the BlissRoms project are expected to:","Be respectful: Treat others with respect, kindness, and empathy, regardless of their background, experience, or opinion.","Maintain a welcoming environment: Foster an inclusive community where everyone feels welcome and valued, regardless of gender, sexual orientation, race, ethnicity, nationality, religion, or any other personal characteristic.","Exercise empathy: Strive to understand and empathize with others' perspectives, experiences, and cultural differences.","Be collaborative: Encourage and support fellow participants by sharing knowledge, ideas, and constructive feedback.","Practice patience and understanding: Recognize that people have diverse skill levels, backgrounds, and time constraints. Be patient and understanding while helping others and resolving conflicts.","Use inclusive language: Be mindful of the words and language used. Avoid offensive or discriminatory language, jokes, or any form of harassment.","Respect personal boundaries: Be mindful of personal boundaries, consent, and privacy. Obtain explicit permission before sharing personal information or engaging in private conversations.","Follow the project's guidelines: Adhere to the project's technical guidelines, contribution processes, and other policies as defined by the BlissRoms project."]},{"l":"Unacceptable Behavior","p":["The following behaviors are considered unacceptable and will not be tolerated within the BlissRoms project:","Harassment and discrimination: Engaging in any form of harassment, discrimination, or offensive behavior, including but not limited to verbal, written, physical, or sexual harassment.","Bullying and intimidation: Intimidating, bullying, or making derogatory or demeaning remarks towards others.","Trolling and flame wars: Engaging in disruptive, disrespectful, or inflammatory discussions or comments.","Doxxing and privacy violations: Sharing personal information or violating someone's privacy without their explicit consent.","Spamming and excessive self-promotion: Posting irrelevant or excessive content, self-promotion, or advertisements.","Unauthorized access or sharing of proprietary information: Accessing, distributing, or sharing proprietary or confidential information without proper authorization.","Violation of intellectual property rights: Infringing on copyright, trademark, or other intellectual property rights of the BlissRoms project or any other party."]},{"l":"Consequences of Violation","p":["Failure to comply with this Code of Conduct may result in consequences, including but not limited to:","Warning and education: The individual may receive a private warning and be educated about the violation and its impact on the community.","Temporary or permanent suspension: In severe cases or repeated violations, the individual may be temporarily or permanently suspended from participating in the BlissRoms project.","Banishment: In extreme cases or for egregious violations, the individual may be banned permanently from all BlissRoms project spaces and platforms."]},{"l":"Reporting and Enforcement","p":["If you witness or experience any behavior that violates this Code of Conduct, please report it immediately to the project moderators or administrators. You can report incidents by contacting the following individuals [insert contact information or links to reporting channels].","All reports will be taken seriously and treated with confidentiality. The project moderators or administrators will review and investigate each reported incident and take appropriate action as necessary."]},{"l":"Conclusion","p":["We believe in fostering a community that celebrates diversity, promotes inclusivity, and upholds the highest standards of respect and collaboration. By adhering to this Code of Conduct, we can collectively create a positive and enriching environment for all participants in the BlissRoms project.","This Code of Conduct is subject to change and improvement over time. Participants are encouraged to provide feedback and suggestions to make our community even better."]}]]